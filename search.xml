<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[设置网站运行时间]]></title>
    <url>%2Fposts%2Ftime.html</url>
    <content type="text"><![CDATA[使用javascript计算博客等网站的运行时间。 废话不多说，直接上代码 12345678910111213141516171819202122232425262728293031323334353637383940function createTime() &#123; var now = new Date(); var run = new Date("05/28/2018 20:01:01"); //總的秒數 var runTime = (now - run) / 1000, days = Math.floor(runTime / 60 / 60 / 24), hours = Math.floor(runTime / 60 / 60 - (24 * days)), minutes = Math.floor(runTime / 60 - (24 * 60 * days) - (60 * hours)), seconds = Math.floor((now - run) / 1000 - (24 * 60 * 60 * days) - (60 * 60 * hours) - (60 * minutes)); //前置零 if (String(hours).length === 1) &#123; hours = "0" + hours; &#125; if (String(minutes).length === 1) &#123; minutes = "0" + minutes; &#125; if (String(seconds).length === 1) &#123; seconds = "0" + seconds; &#125; /*document.querySelector(".run-times").innerHTML = days + "&amp;thinsp;天&amp;thinsp;" + hours + "&amp;thinsp;时&amp;thinsp;" + minutes + "&amp;thinsp;分&amp;thinsp;" + seconds + "&amp;thinsp;秒"; */ document.querySelector(".run-times").innerHTML = "RunTime: " + days + "," + hours + ":" + minutes + ":" + seconds + ""; &#125;//setInterval("createTime()", 500);if (!document.hidden) &#123; var siteTime = setInterval("createTime()", 500);&#125; else &#123; clearInterval(siteTime);&#125;/** * HTML写法&lt;span class="run-times" title="网站运行时间"&gt;载入时分秒...&lt;/span&gt;&lt;p class="run-times" title="主頁运行时间"&gt;RunTime Loading...&lt;/p&gt;*/]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常用指令]]></title>
    <url>%2Fposts%2FHexo%2FHexo0004.html</url>
    <content type="text"><![CDATA[作为一个开发程序员都应该知道命令对于一直开发语言是非常重要的，这对Hexo也是如此。如果不懂命令代码，对一种语言是非常麻烦的，不仅不能流利的写出程序，而且程序出错你也不知道问题出在哪里，最后肯定导致程序大把漏洞，运行不稳定。 Hexo大约有二十几个命令，但一般普通用户经常使用的大概只有下列几个: init1hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 1hexo new "post title with whitespace" 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录： 1hexo new page --path about/me "About me" 以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me” 注意！title 是必须指定的！如果你这么做并不能达到你的目的： 1hexo new page --path about/me 此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。 generate1hexo generate 生成静态文件。 参数 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 -b, --bail 生成过程中如果发生任何未处理的异常则抛出异常 -f, --force 强制重新生成文件 Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate 该命令可以简写为 1hexo g publish1hexo publish [layout] &lt;filename&gt; 发表草稿。 server1hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 参数 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy1hexo deploy 部署网站。 参数 描述 -g, --generate 部署之前预先生成静态文件 该命令可以简写为： 1hexo d render1hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, --output 设置输出路径 migrate1hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list1hexo list &lt;type&gt; 列出网站资料。 version1hexo version 显示 Hexo 版本。 安全模式1hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式1hexo --silent 隐藏终端信息。 自定义配置文件的路径1234# 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高$ hexo generate --config custom.yml,custom2.json,custom3.yml 自定义配置文件的路径，指定这个参数后将不再使用默认的 _config.yml。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如： 1234# 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次custom2.json$ hexo generate --config custom.yml,custom2.json,custom3.yml 当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 _multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。 显示草稿1hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[用记事本编写第一个 java 程序]]></title>
    <url>%2Fposts%2Fjava.html</url>
    <content type="text"><![CDATA[之所以用记事本来写不是为了装X或者什么的。反而恰恰是返璞归真，因为在用java语言进行程序开发时，首先是以纯文本的方式编写所有的java源程序，并保存成以.java为后缀的文件；然后将这些源程序用javac编译成.class后缀名的字节代码文件；字节代码不是被本地处理器执行的代码，而是能够被java虚拟机（JVM）执行的代码。最后用java运行工具在JVM执行java应用程序。 由于JVM可以运行在不同的操作系统上，因此同一个字节代码文件可以跨平台运行。 javac java 环境JDKJDK为Java编辑的最基本的环境，安装就不多介绍了，不会的看百度官方教程， JDK环境下载点击此处 编写 java用记事本编辑java文件，并且把后缀改成.java，文件名和类名要一样。 12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println("Hello World!"); &#125;&#125; 输出结果如下：]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[博客转移至云端]]></title>
    <url>%2Fposts%2FCloudStudio.html</url>
    <content type="text"><![CDATA[每次换了电脑或者在其他地方想更新博客就得重新安装Hexo，并且安装一系列的环境，最后还要从服务器端clone原来的文件，感觉十分麻烦。于是就在网上看了一堆没用的文章，最后发现腾讯云开发者平台里面的Cloud Studio可以完美解决这一问题。就是就开始了博客的转移工作。 Cloud Studio介绍Cloud Studio 是一款腾讯云平台对程序员开放的开发平台，里面各种开发环境都有。是一个很不错的开发平台，也是免费对外开发。这样就可以省的我们本地电脑安装各种运行环境，还是挺方便的。 电脑端转移到Cloud Studio当我们在Cloud Studio上新建好项目后，将你的本地Hexo备份到原来的服务器端，我是用的Github。让后直接在里面输入远程git命令 clone到你的Cloud Stdio上就可以正常运行，操作十分简单，下面就是我转移的图。如果你想重新在Cloud Stdio上搭建Hexo也是可以的，方法都是一样的，不会的可以看我之前的搭建教程 。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>日常折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio Code隐藏目录解决方案]]></title>
    <url>%2Fposts%2FVisualStudioCode.html</url>
    <content type="text"><![CDATA[不少朋友在备份自己的博客是会出现失败的情况，打开Github后会发现有很多文件都没有上传成功，这是因为你本地博客目录下和主题目录下.git文件存在所导致的。而细心的人会第一时间去删除.git，但会发现并没有这个文件，这是因为.git本身是隐藏的，所以无法看到。 解决方案在默认设置中，Visual Studio Code 将下列文件文件排除在显示列表中： “files.exclude”: { “/.git”: true, “/.svn”: true, “/.hg”: true, “/.DS_Store”: true} 你可以修改用户设置或者工作区设置，将.git文件添加到显示列表中 “files.exclude”: { “**/.git”: false} 如果在Visual Studio Code的设置页面中，可以使用下面的步骤修改设置：1. 文件 &gt; 首选项 &gt; 设置图一：设置页面 2. 用户设置 &gt; 文本编辑器 &gt; Exclude，找到对应排除的项”**/.git“，并删除它，隐藏的.git文件就会自动出现，如下图： 图二：排除文件页面 图三：显示.git文件的效果 这样就完美解决了找不到.git 的问题，将文件删除后所以指令都无报错。]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo 多终端同步]]></title>
    <url>%2Fposts%2FHexo%2FHexo0003.html</url>
    <content type="text"><![CDATA[备份 Hexo 博客123456789//如果themes/next(主题文件)下面有.git，请删除这个.git文件夹。cd hexogit init //初始化本地仓库git add source themes scaffolds _config.yml package.json package-lock.json //将必要的文件依次添加git commit -m "blog hexo"git branch hexo //新建hexo分支git checkout hexo //切换到hexo分支上git remote add origin git@github.com:username/username.github.io.git //将本地与Github项目对接git push origin hexo //push到Github项目的hexo分支上 在其他终端克隆和更新 hexo 博客 nodejs,git,hexo 已经安装好, 即搭建完成 克隆 hexo 博客备份123git clone -b hexo git@github.com:username/username.github.io.git //将Github中hexo分支clone到本地cd user.github.ionpm install //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init 这样我们的备份文件就会原封不动的拷贝到本地。 写新文章并备份和部署（备用操作）1234567//进入username.github.io文件夹,应是hexo分支git pull origin hexo //本地和远端的融合hexo new post "new post name" //写新文章git add sourcegit commit -m "xxx"git push origin hexo //备份hexo d -g //部署 综上多终端就完成同步了，也不用在担心源文件丢失而带来的麻烦了。参考1参考2]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HEXO NEXT主题美化]]></title>
    <url>%2Fposts%2FHexo%2FHexo0002.html</url>
    <content type="text"><![CDATA[Hexo添加背景图在 themes/next/source/css/_custom/custom.styl中添加如下代码： 1234567body&#123; background:url('图片地址'); background-size: cover; background-repeat: no-repeat; background-attachment: fixed; background-position: center;&#125; 点击出现桃心在/themes/next/source/js/src下新建文件click.js，接着把以下粘贴到click.js文件中，添加如下代码： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 然后\themes\next\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; 修改Logo字体在 themes/next/source/css/_custom/custom.styl中添加如下代码： 12345678@font-face &#123; font-family: Zitiming; src: url('字体地址'); #(字体自己网上下载即可)&#125;.site-title &#123; font-size: 40px !important; font-family: 'Zitiming' !important;&#125; 自定义鼠标样式在 themes/next/source/css/_custom/custom.styl中添加如下代码： 1234567// 鼠标样式 * &#123; cursor: url("鼠标样式地址"),auto!important &#125; :active &#123; cursor: url("鼠标样式地址"),auto!important &#125; 文章添加边框阴影效果在 themes/next/source/css/_custom/custom.styl中添加如下代码： 12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 显示当前浏览进度在themes/next/_config.yml，搜索b2t把 false 改为 true 如下： 12345# Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true 添加RSS在博客根目录下，安装 Hexo 插件：(插件会放在node_modules文件夹中) 1npm install --save hexo-generator-feed 接下来打开站点配置文件，末尾添加如下代码： 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 然后打开next主题文件夹里面的_config.yml,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格) 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 配置完之后运行： 12hexo ghexo s 修改头像并旋转打开\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在里面添加如下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 网站底部加上访问量打开\themes\next\layout\_partials\footer.swig文件,在copyright前加上画红线这句： 1&lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 然后在合适的位置添加显示统计的代码： 12345&lt;div class="powered-by"&gt;&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;&lt;span id="busuanzi_container_site_uv"&gt; 本站访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 底部字数统计在博客根目录下运行如下代码： 1npm install hexo-wordcount --save 然后在/themes/next/layout/_partials/footer.swig文件尾部加上： 1234&lt;div class="theme-info"&gt; &lt;div class="powered-by"&gt;&lt;/div&gt; &lt;span class="post-count"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 修改网站的图标Favicon在图标库中找一张（32*32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon.ico，然后把图标放在/themes/next/source/images里，并且修改主题配置文件： 12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico 文章字数统计功能在博客根目录下安装 hexo-wordcount,运行： 1npm install hexo-wordcount --save 然后在主题的配置文件中，配置如下： 123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true 修改打赏字体不闪动修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数wechat:hover和alipay:hover，如下： 123456789101112/* 注释文字闪动函数 #wechat:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; #alipay:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125;*/]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown图片居中]]></title>
    <url>%2Fposts%2FHexo%2FMarkdown-0001.html</url>
    <content type="text"><![CDATA[Markdown对图片进行居中设置大小标准的markdown中提供了图片的设置大小的操作，但是在本地把图片编辑好的代码生成静态文件发现图片不能显示了。使用下面方法可以完美解决，当然希望以后的hexo版本希望能够解决这个问题。 一般的markdown语法设置图片大小标准的markdown，在图片后面加上 “=200x300” (200是宽度，300是高度，也可以之定义宽度)，就能实现下面的效果。但是有一些版本的hexo不行。 1![]("图片地址"=200x) 使用img标签，设置图片大小直接在markdown中使用HTML标签，多数markdown工具都支持。 1&lt;img width=200 src="图片地址" &gt; 图片居中markdown目前没有支持图片居中的，所有的图片要么是100%宽度，支持设置大小的markdown一般也是左对齐的，所以居中只能靠HTML标签了。 123&lt;div align=center&gt;![](图片地址 =200x)&lt;/div&gt; 或者： 123&lt;div align=center&gt; &lt;img width=200 src="图片地址" &gt;&lt;/div&gt; 效果如下：]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo静态博客搭建]]></title>
    <url>%2Fposts%2FHexo%2FHexo0001.html</url>
    <content type="text"><![CDATA[1.安装Git官方下载地址 2.安装Node.js在 Windows 环境下安装 Node.js 非常简单，仅须下载安装文件并执行即可完成安装。 3.安装hexo利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash） 1npm install -g hexo 可以通过以下命令查看hexo的版本 1hexo version 3.1创建Hexo文件夹安装完成后，在合适的磁盘内新建一个文件夹作为博客目录 （如E:\Hexo），执行以下指令(在E:\Hexo文件夹内点击鼠标右键，选择Git bash） 1hexo init 3.2安装依赖包1npm install 3.3本地查看我们已经搭建起本地的hexo博客了，输入下列内容进行本地缓存。 12hexo ghexo s 输入以下内容到浏览器localhost:4000即可查看本地效果。 4.将博客部署到Github 4.1注册Github账号已有账号可以跳过。没有的，请在此进行注册，这里就不介绍了。 4.2创建repository在自己Github主页右上角，点击加号， 创建一个新的repository。 4.3部署编辑_config.yml(在E:\Hexo下)。将repository换成你刚才新建的地址。例如： 1234deploy: type: git repository: https://github.com/laustar/laustar.github.io.git branch: master 5.配置SSH5.1创建SSH在正式部署之前，新用户需要设置 SSH。 5.2安装上传工具安装部分模块，执行下面的命令。 1npm install hexo-deployer-git --save 在第一次使用Git时，需要用户名和邮箱两个信息 。具体通过以下命令设置： 12git config --global user.name "你的用户名"git config --global user.email "你的邮箱" 最后输入以下命令上传即可。 123hexo cleanhexo ghexo d]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
</search>
