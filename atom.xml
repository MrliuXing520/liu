<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lau-Star</title>
  
  <subtitle>尚未佩妥剑,转眼便江湖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laustar.fun/"/>
  <updated>2020-09-18T04:17:11.198Z</updated>
  <id>https://laustar.fun/</id>
  
  <author>
    <name>Lau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7.5服务器搭建Hadoop</title>
    <link href="https://laustar.fun/posts/hadoop.html"/>
    <id>https://laustar.fun/posts/hadoop.html</id>
    <published>2020-09-18T04:12:45.000Z</published>
    <updated>2020-09-18T04:17:11.198Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。Hadoop是一个能够对大量数据进行分布式处理的软件框架，Hadoop 以一种可靠、高效、可伸缩的方式进行数据处理搭建Hadoop框架首先要配置JDK环境，其次是Hadoop的相关配置。</p></div><a id="more"></a> <h4 id="JDK的配置"><a href="#JDK的配置" class="headerlink" title="JDK的配置"></a>JDK的配置</h4><h4 id="Hadoop配置"><a href="#Hadoop配置" class="headerlink" title="Hadoop配置"></a>Hadoop配置</h4><p>1、<a href="http://hadoop.apache.org" target="_blank" rel="noopener">Hadoop下载</a></p><blockquote><p>wget  <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.1.4/hadoop-3.1.4.tar.gz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.1.4/hadoop-3.1.4.tar.gz</a></p></blockquote><p>2、解压Hadoop压缩包</p><blockquote><p>tar zxvf hadoop-3.1.4</p></blockquote><p>3、修改<code>etc/hadoop/core-site.xml</code>文件配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!--  --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:<span class="comment">//localhost:9000&lt;/value&gt;</span></span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;!-- 缓存存储路径 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/app/hadooptemp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>4、修改<code>etc/hadoop/hdfs-site.xml</code>文件配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 默认为<span class="number">3</span>，由于是单机，所以配置<span class="number">1</span> --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;!-- 配置http访问地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.http.address&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;0.0.0.0:9870&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>5、修改<code>etc/hadoop/hadoop-env.sh</code>文件配置</p><blockquote><p>export JAVA_HOME=/usr/local/java/jdk1.8.0_151</p></blockquote><p>注：JAVA_HOME配置自己JDK的所在路径</p><p>6、修改<code>etc/hadoop/yarn-env.sh</code>文件配置</p><blockquote><p>export JAVA_HOME=/usr/local/java/jdk1.8.0_151</p></blockquote><p>注：JAVA_HOME配置自己JDK的所在路径</p><p>7、修改<code>sbin/stop-dfs.sh</code>文件配置(<em>顶部添加</em>)</p><blockquote><p>HDFS_DATANODE_USER=root<br>HDFS_DATANODE_SECURE_USER=hdfs<br>HDFS_NAMENODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root</p></blockquote><p>8、修改<code>sbin/start-dfs.sh</code>文件配置(<em>顶部添加</em>)</p><blockquote><p>HDFS_DATANODE_USER=root<br>HDFS_DATANODE_SECURE_USER=hdfs<br>HDFS_NAMENODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root</p></blockquote><p>9、格式化Hadoop(<em>sbin目录下</em>)</p><blockquote><p>./hdfs namenode -format</p></blockquote><p>10、启动Hadoop(<em>sbin目录下</em>)</p><blockquote><p>./start-dfs.sh</p></blockquote><p>11、浏览器输入<code>你的ip:9870</code>出现以下界面则搭建成功<br><img src="https://i.loli.net/2020/09/18/Dcdo1qj9Z6RsfUV.png" alt="enter image description here"></p><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><p>1、如果在搭建过程中出现以下问题<br><img src="https://i.loli.net/2020/09/18/iPlqufcH8dMSrxv.jpg" alt="enter image description here"><br>解决办法如下：<br>在<code>start-dfs.sh</code>和<code>stop-dfs.sh</code>两个文件夹中添加如下配置</p><blockquote><p>   #!/usr/bin/env bash<br>HDFS_DATANODE_USER=root<br>HADOOP_SECURE_DN_USER=hdfs<br>HDFS_NAMENODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root</p></blockquote><p>在<code>start-yarn.sh</code>和<code>stop-yarn.sh</code>两个文件夹中添加如下配置</p><blockquote><p>  #!/usr/bin/env bash<br>YARN_RESOURCEMANAGER_USER=root<br>HADOOP_SECURE_DN_USER=yarn<br>YARN_NODEMANAGER_USER=root</p></blockquote><p>重新开始start</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;Hadoop是一个由Apache基金会所开发的分布式系统基础架构。Hadoop是一个能够对大量数据进行分布式处理的软件框架，Hadoop 以一种可靠、高效、可伸缩的方式进行数据处理搭建Hadoop框架首先要配置JDK环境，其次是Hadoop的相关配置。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://laustar.fun/categories/Hadoop/"/>
    
    
      <category term="学习" scheme="https://laustar.fun/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java Swing 限制JTextField输入类型</title>
    <link href="https://laustar.fun/posts/Java/Java%20Swing.html"/>
    <id>https://laustar.fun/posts/Java/Java Swing.html</id>
    <published>2020-05-19T07:16:53.000Z</published>
    <updated>2020-05-19T08:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>在Java Swing中有时候想去限制JTextField输入框的一些内容时，很多时候会用正则表达式去判断条件，这也确实是比较通用和正规的一种方式，但是有时候为了方便我们也会选择其他的一些方式，下面就是小编给大家整理的两种新的方式，感兴趣的小伙伴们可以去试试哟！</p></div><a id="more"></a> <h3 id="限制输入数字"><a href="#限制输入数字" class="headerlink" title="限制输入数字"></a>限制输入数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class IntegerDocument extends PlainDocument&#123;</span><br><span class="line">public void insertString(int offset, String s, AttributeSet attributeSet) throws BadLocationException&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Integer.parseInt(s);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex)&#123;</span><br><span class="line">Toolkit.getDefaultToolkit().beep();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">super.insertString(offset, s, attributeSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>调用方法<code>textfield.setDocument(new IntegerDocument());。</code></p></blockquote><h3 id="限制输入数字和长度"><a href="#限制输入数字和长度" class="headerlink" title="限制输入数字和长度"></a>限制输入数字和长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class NumberLenghtLimitedDmt extends PlainDocument &#123;</span><br><span class="line">private int limit;</span><br><span class="line">public NumberLenghtLimitedDmt(int limit) &#123;</span><br><span class="line">super();</span><br><span class="line">this.limit = limit;</span><br><span class="line">&#125;</span><br><span class="line">public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException &#123;</span><br><span class="line"><span class="keyword">if</span> (str == null) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((getLength() + str.length()) &lt;= limit) &#123;</span><br><span class="line">char[] upper = str.toCharArray();</span><br><span class="line">int length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; upper.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (upper[i] &gt;= <span class="string">'0'</span> &amp;&amp; upper[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">upper[length++] = upper[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">super.insertString(offset, new String(upper, <span class="number">0</span>, length), attr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>调用方法如下<code>JTextField text=new JTextField();</code><br> <code>text.setDocument(new NumberLenghtLimitedDmt(7));</code><br>那么这个文本框只能输入7位而且是只能是数字!!!</p></blockquote><p>通过上面的两种方法就可以直接限制Swing中的输入框的问题，不用去正则表达式来判断啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;在Java Swing中有时候想去限制JTextField输入框的一些内容时，很多时候会用正则表达式去判断条件，这也确实是比较通用和正规的一种方式，但是有时候为了方便我们也会选择其他的一些方式，下面就是小编给大家整理的两种新的方式，感兴趣的小伙伴们可以去试试哟！&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Java" scheme="https://laustar.fun/categories/Java/"/>
    
    
      <category term="Java" scheme="https://laustar.fun/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo渲染</title>
    <link href="https://laustar.fun/posts/HexoRendering.html"/>
    <id>https://laustar.fun/posts/HexoRendering.html</id>
    <published>2020-04-19T10:06:05.000Z</published>
    <updated>2020-09-18T04:15:46.842Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>有的时候想要放点私货。直接放在source文件夹下面吧，会被Hexo渲染掉。直接放在public文件下面，每次执行完hexo clean又什么都没了。这时候我们就需要跳过指定文件的渲染了。废话不多说直接上干货。</p></div><a id="more"></a> <h4 id="跳过单文件"><a href="#跳过单文件" class="headerlink" title="跳过单文件"></a>跳过单文件</h4><p>如果要跳过source文件夹下的test.html，可以这样配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: test.html</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [test.html]</span><br></pre></td></tr></table></figure><blockquote><p>注意，千万不要写成/test.html，这里只能填相对于source文件夹的相对路径。</p></blockquote><h4 id="跳过多文件"><a href="#跳过多文件" class="headerlink" title="跳过多文件"></a>跳过多文件</h4><p>1、如果要忽略source下的test文件夹下所有文件，可以这样配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: test/*</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [test/*]</span><br></pre></td></tr></table></figure><p>2、如果要忽略source下的test文件夹下.html文件，可以这样配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: test/*.html</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [test/*.html]</span><br></pre></td></tr></table></figure><p>3、如果要忽略source下的test文件夹下所有文件和目录，可以这样配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: test/**</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [test/**]</span><br></pre></td></tr></table></figure><p>4、如果要忽略多个路径的文件或目录，可以这样配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">    - test.html</span><br><span class="line">    - <span class="string">'*.html'</span></span><br><span class="line">    - test/**</span><br><span class="line">    - test/*</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [test.html, <span class="string">'*.html'</span>, test/**, test/*]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;有的时候想要放点私货。直接放在source文件夹下面吧，会被Hexo渲染掉。直接放在public文件下面，每次执行完hexo clean又什么都没了。这时候我们就需要跳过指定文件的渲染了。废话不多说直接上干货。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="HEXO" scheme="https://laustar.fun/categories/HEXO/"/>
    
    
  </entry>
  
  <entry>
    <title>设置网站运行时间</title>
    <link href="https://laustar.fun/posts/time.html"/>
    <id>https://laustar.fun/posts/time.html</id>
    <published>2019-10-05T02:22:24.000Z</published>
    <updated>2020-05-19T08:57:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>使用<code>javascript</code>计算博客等网站的运行时间。</p></div><a id="more"></a> <p>废话不多说，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function createTime() &#123;</span><br><span class="line">  var now = new Date();</span><br><span class="line">  var run = new Date(<span class="string">"05/28/2018 20:01:01"</span>);</span><br><span class="line">  //總的秒數</span><br><span class="line">  var runTime = (now - run) / <span class="number">1000</span>,</span><br><span class="line">    days = Math.floor(runTime / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>),</span><br><span class="line">    hours = Math.floor(runTime / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * days)),</span><br><span class="line">    minutes = Math.floor(runTime / <span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * days) - (<span class="number">60</span> * hours)),</span><br><span class="line">    seconds = Math.floor((now - run) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * days) - (<span class="number">60</span> * <span class="number">60</span> * hours) - (<span class="number">60</span> * minutes));</span><br><span class="line">  //前置零</span><br><span class="line">  <span class="keyword">if</span> (String(hours).length === <span class="number">1</span>) &#123;</span><br><span class="line">    hours = <span class="string">"0"</span> + hours;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (String(minutes).length === <span class="number">1</span>) &#123;</span><br><span class="line">    minutes = <span class="string">"0"</span> + minutes;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (String(seconds).length === <span class="number">1</span>) &#123;</span><br><span class="line">    seconds = <span class="string">"0"</span> + seconds;</span><br><span class="line">  &#125;</span><br><span class="line">  /*document.querySelector(<span class="string">".run-times"</span>).innerHTML = days + <span class="string">"&amp;thinsp;天&amp;thinsp;"</span> + hours</span><br><span class="line">          + <span class="string">"&amp;thinsp;时&amp;thinsp;"</span> + minutes + <span class="string">"&amp;thinsp;分&amp;thinsp;"</span> + seconds + <span class="string">"&amp;thinsp;秒"</span>;</span><br><span class="line">  */</span><br><span class="line">  document.querySelector(<span class="string">".run-times"</span>).innerHTML = <span class="string">"RunTime: "</span> + days + <span class="string">","</span> + hours</span><br><span class="line">          + <span class="string">":"</span> + minutes + <span class="string">":"</span> + seconds + <span class="string">""</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//setInterval(<span class="string">"createTime()"</span>, <span class="number">500</span>);</span><br><span class="line"><span class="keyword">if</span> (!document.hidden) &#123;</span><br><span class="line">  var siteTime = setInterval(<span class="string">"createTime()"</span>, <span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  clearInterval(siteTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * HTML写法</span><br><span class="line">&lt;span class="run-times" title="网站运行时间"&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;p class="run-times" title="主頁运行时间"&gt;RunTime Loading...&lt;/p&gt;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;使用&lt;code&gt;javascript&lt;/code&gt;计算博客等网站的运行时间。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Other" scheme="https://laustar.fun/categories/Other/"/>
    
    
      <category term="其他" scheme="https://laustar.fun/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用指令</title>
    <link href="https://laustar.fun/posts/Hexo/Hexo0004.html"/>
    <id>https://laustar.fun/posts/Hexo/Hexo0004.html</id>
    <published>2019-09-13T08:29:46.000Z</published>
    <updated>2019-10-06T01:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>作为一个开发程序员都应该知道命令对于一直开发语言是非常重要的，这对Hexo也是如此。如果不懂命令代码，对一种语言是非常麻烦的，不仅不能流利的写出程序，而且程序出错你也不知道问题出在哪里，最后肯定导致程序大把漏洞，运行不稳定。</p></div><a id="more"></a> <p>Hexo大约有二十几个命令，但一般普通用户经常使用的大概只有下列几个:</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code>中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"post title with whitespace"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p, --path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r, --replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s, --slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me <span class="string">"About me"</span></span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 <code>Front Matter</code> 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d, --deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w, --watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b, --bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f, --force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p, --port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s, --static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l, --log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g, --generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o, --output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h4 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"><span class="comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"><span class="comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次custom2.json</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h4 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;作为一个开发程序员都应该知道命令对于一直开发语言是非常重要的，这对Hexo也是如此。如果不懂命令代码，对一种语言是非常麻烦的，不仅不能流利的写出程序，而且程序出错你也不知道问题出在哪里，最后肯定导致程序大把漏洞，运行不稳定。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="HEXO" scheme="https://laustar.fun/categories/HEXO/"/>
    
    
  </entry>
  
  <entry>
    <title>用记事本编写第一个 java 程序</title>
    <link href="https://laustar.fun/posts/Java/Java.html"/>
    <id>https://laustar.fun/posts/Java/Java.html</id>
    <published>2019-09-09T14:42:51.000Z</published>
    <updated>2020-05-19T08:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>之所以用记事本来写不是为了装X或者什么的。反而恰恰是返璞归真，因为在用java语言进行程序开发时，首先是以纯文本的方式编写所有的java源程序，并保存成以.java为后缀的文件；然后将这些源程序用javac编译成.class后缀名的字节代码文件；字节代码不是被本地处理器执行的代码，而是能够被java虚拟机（JVM）执行的代码。最后用java运行工具在JVM执行java应用程序。 </p></div><a id="more"></a> <p>由于JVM可以运行在不同的操作系统上，因此同一个字节代码文件可以跨平台运行。</p><ul><li>javac</li><li>java<br><img src="https://i.loli.net/2019/09/09/G7BTgl9F4qumOCU.png" alt="2.png"></li></ul><h4 id="环境JDK"><a href="#环境JDK" class="headerlink" title="环境JDK"></a>环境JDK</h4><p>JDK为Java编辑的最基本的环境，安装就不多介绍了，不会的看百度<a href="https://jingyan.baidu.com/article/6dad5075d1dc40a123e36ea3.html" target="_blank" rel="noopener">官方教程</a>， JDK环境下载<a href="https://www.oracle.com/java/technologies/jdk8-downloads.html" target="_blank" rel="noopener">点击此处</a><br><img src="https://i.loli.net/2019/09/09/rSosEimABPWq21n.png" alt="jdk.png"></p><h4 id="编写-java"><a href="#编写-java" class="headerlink" title="编写 java"></a>编写 java</h4><p>用记事本编辑java文件，并且把后缀改成<code>.java</code>，文件名和类名要一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.loli.net/2019/09/09/qP9h1kxgNLWbwFT.png" alt="sc.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;之所以用记事本来写不是为了装X或者什么的。反而恰恰是返璞归真，因为在用java语言进行程序开发时，首先是以纯文本的方式编写所有的java源程序，并保存成以.java为后缀的文件；然后将这些源程序用javac编译成.class后缀名的字节代码文件；字节代码不是被本地处理器执行的代码，而是能够被java虚拟机（JVM）执行的代码。最后用java运行工具在JVM执行java应用程序。 &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Java" scheme="https://laustar.fun/categories/Java/"/>
    
    
      <category term="Java" scheme="https://laustar.fun/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>博客转移至云端</title>
    <link href="https://laustar.fun/posts/CloudStudio.html"/>
    <id>https://laustar.fun/posts/CloudStudio.html</id>
    <published>2019-08-29T05:47:06.000Z</published>
    <updated>2020-05-19T08:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>每次换了电脑或者在其他地方想更新博客就得重新安装Hexo，并且安装一系列的环境，最后还要从服务器端clone原来的文件，感觉十分麻烦。于是就在网上看了一堆没用的文章，最后发现腾讯云开发者平台里面的Cloud Studio可以完美解决这一问题。就是就开始了博客的转移工作。</p></div><a id="more"></a> <h4 id="Cloud-Studio介绍"><a href="#Cloud-Studio介绍" class="headerlink" title="Cloud Studio介绍"></a>Cloud Studio介绍</h4><p><a href="https://studio.dev.tencent.com" target="_blank" rel="noopener">Cloud Studio</a> 是一款腾讯云平台对程序员开放的开发平台，里面各种开发环境都有。是一个很不错的开发平台，也是免费对外开发。这样就可以省的我们本地电脑安装各种运行环境，还是挺方便的。<br><img src="https://i.loli.net/2019/08/29/DbcvxJfwhyNzOqL.png" alt="enter image description here"></p><h4 id="电脑端转移到Cloud-Studio"><a href="#电脑端转移到Cloud-Studio" class="headerlink" title="电脑端转移到Cloud Studio"></a>电脑端转移到Cloud Studio</h4><p>当我们在Cloud Studio上新建好项目后，将你的本地Hexo备份到原来的服务器端，我是用的Github。让后直接在里面输入远程git命令 clone到你的Cloud Stdio上就可以正常运行，操作十分简单，下面就是我转移的图。如果你想重新在Cloud Stdio上搭建Hexo也是可以的，方法都是一样的，不会的可以看我之前的搭建<a href="https://laustar.fun/posts/Hexo/Hexo-0001.html/#more">教程</a> 。<br><img src="https://i.loli.net/2019/08/29/cIzhP71Z4YR3XLi.png" alt="克隆.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;每次换了电脑或者在其他地方想更新博客就得重新安装Hexo，并且安装一系列的环境，最后还要从服务器端clone原来的文件，感觉十分麻烦。于是就在网上看了一堆没用的文章，最后发现腾讯云开发者平台里面的Cloud Studio可以完美解决这一问题。就是就开始了博客的转移工作。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Other" scheme="https://laustar.fun/categories/Other/"/>
    
    
      <category term="日常折腾" scheme="https://laustar.fun/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code隐藏目录解决方案</title>
    <link href="https://laustar.fun/posts/VisualStudioCode.html"/>
    <id>https://laustar.fun/posts/VisualStudioCode.html</id>
    <published>2019-08-19T05:56:51.000Z</published>
    <updated>2019-10-06T02:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>不少朋友在备份自己的博客是会出现失败的情况，打开Github后会发现有很多文件都没有上传成功，这是因为你本地博客目录下和主题目录下<code>.git</code>文件存在所导致的。而细心的人会第一时间去删除<code>.git</code>，但会发现并没有这个文件，这是因为<code>.git</code>本身是隐藏的，所以无法看到。</p></div><a id="more"></a> <h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在<code>默认设置</code>中，Visual Studio Code 将下列文件文件排除在显示列表中：</p><blockquote><p>“files.exclude”: {<br>    “<strong>/.git”: true,<br>    “</strong>/.svn”: true,<br>    “<strong>/.hg”: true,<br>    “</strong>/.DS_Store”: true<br>}</p></blockquote><p>你可以修改用户设置或者工作区设置，将.git文件添加到显示列表中</p><blockquote><p>“files.exclude”: {<br>     “**/.git”: false<br>}</p></blockquote><p>如果在Visual Studio Code的设置页面中，可以使用下面的步骤修改设置：<br><code>1. 文件 &gt; 首选项 &gt; 设置</code><br>图一：设置页面<br><img src="https://i.loli.net/2019/08/19/Rdr6qOaxCSvNwgc.png" alt="Alt text"></p><p><code>2. 用户设置 &gt; 文本编辑器 &gt; Exclude，找到对应排除的项”**/.git“，并删除它，隐藏的.git文件就会自动出现</code>，如下图：</p><p>图二：排除文件页面<br> <img src="https://i.loli.net/2019/08/19/sx21O4rVCqBtjTz.png" alt="Alt text"></p><p>图三：显示.git文件的效果<br> <img src="https://i.loli.net/2019/08/19/Yz2lns4iv7X9jda.png" alt="Alt text"></p><p>这样就完美解决了找不到<code>.git</code> 的问题，将文件删除后所以指令都无报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;不少朋友在备份自己的博客是会出现失败的情况，打开Github后会发现有很多文件都没有上传成功，这是因为你本地博客目录下和主题目录下&lt;code&gt;.git&lt;/code&gt;文件存在所导致的。而细心的人会第一时间去删除&lt;code&gt;.git&lt;/code&gt;，但会发现并没有这个文件，这是因为&lt;code&gt;.git&lt;/code&gt;本身是隐藏的，所以无法看到。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="HEXO" scheme="https://laustar.fun/categories/HEXO/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 多终端同步</title>
    <link href="https://laustar.fun/posts/Hexo/Hexo0003.html"/>
    <id>https://laustar.fun/posts/Hexo/Hexo0003.html</id>
    <published>2019-08-18T10:13:47.000Z</published>
    <updated>2020-04-22T10:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>作为一个程序员的都知道数据的重要性。数据无价。来我们一起看看Hexo备份吧。</p></div><a id="more"></a> <h4 id="备份-Hexo-博客"><a href="#备份-Hexo-博客" class="headerlink" title="备份 Hexo 博客"></a>备份 Hexo 博客</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//如果themes/next(主题文件)下面有.git，请删除这个.git文件夹。</span><br><span class="line">cd hexo</span><br><span class="line">git init  //初始化本地仓库</span><br><span class="line">git add source themes scaffolds _config.yml package.json package-lock.json  //将必要的文件依次添加</span><br><span class="line">git commit -m <span class="string">"blog hexo"</span></span><br><span class="line">git branch hexo  //新建hexo分支</span><br><span class="line">git checkout hexo  //切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:username/username.github.io.git  //将本地与Github项目对接</span><br><span class="line">git push origin hexo  //push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure><h4 id="在其他终端克隆和更新-hexo-博客"><a href="#在其他终端克隆和更新-hexo-博客" class="headerlink" title="在其他终端克隆和更新 hexo 博客"></a>在其他终端克隆和更新 hexo 博客</h4><blockquote><p>nodejs,git,hexo 已经安装好, 即搭建完成</p></blockquote><h4 id="克隆-hexo-博客备份"><a href="#克隆-hexo-博客备份" class="headerlink" title="克隆 hexo 博客备份"></a>克隆 hexo 博客备份</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com:username/username.github.io.git  //将Github中hexo分支clone到本地</span><br><span class="line">cd user.github.io</span><br><span class="line">npm install  //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init</span><br></pre></td></tr></table></figure><p>这样我们的备份文件就会原封不动的拷贝到本地。</p><h4 id="写新文章并备份和部署（备用操作）"><a href="#写新文章并备份和部署（备用操作）" class="headerlink" title="写新文章并备份和部署（备用操作）"></a>写新文章并备份和部署（备用操作）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//进入username.github.io文件夹,应是hexo分支</span><br><span class="line">git pull origin hexo //本地和远端的融合</span><br><span class="line">hexo new post <span class="string">"new post name"</span>  //写新文章</span><br><span class="line">git add source</span><br><span class="line">git commit -m <span class="string">"xxx"</span></span><br><span class="line">git push origin hexo  //备份</span><br><span class="line">hexo d -g  //部署</span><br></pre></td></tr></table></figure><p>综上多终端就完成同步了，也不用在担心源文件丢失而带来的麻烦了。<br><a href="https://lruihao.cn/posts/blog-backup.html" target="_blank" rel="noopener">参考1</a><br><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener">参考2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;作为一个程序员的都知道数据的重要性。数据无价。来我们一起看看Hexo备份吧。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="HEXO" scheme="https://laustar.fun/categories/HEXO/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO NEXT主题美化</title>
    <link href="https://laustar.fun/posts/Hexo/Hexo0002.html"/>
    <id>https://laustar.fun/posts/Hexo/Hexo0002.html</id>
    <published>2019-08-13T03:42:33.000Z</published>
    <updated>2020-04-22T10:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>Hexo博客搭建很容易，但是要把自己的博客美化好，还是挺难的，首先你必须得有闲心来做这个事情。然后就是一步一步操作，傻瓜式方法，你也试试吧。</p></div><a id="more"></a> <h4 id="Hexo添加背景图"><a href="#Hexo添加背景图" class="headerlink" title="Hexo添加背景图"></a>Hexo添加背景图</h4><p>在 <code>themes/next/source/css/_custom/custom.styl</code>中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background:url(<span class="string">'图片地址'</span>);</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment: fixed;</span><br><span class="line">    background-position: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="点击出现桃心"><a href="#点击出现桃心" class="headerlink" title="点击出现桃心"></a>点击出现桃心</h4><p>在<code>/themes/next/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中，添加如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>然后<code>\themes\next\layout\_layout.swig</code>文件末尾添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="修改Logo字体"><a href="#修改Logo字体" class="headerlink" title="修改Logo字体"></a>修改Logo字体</h4><p>在 <code>themes/next/source/css/_custom/custom.styl</code>中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@font-face &#123;</span></span><br><span class="line">    font-family: Zitiming;</span><br><span class="line">    src: url(<span class="string">'字体地址'</span>); <span class="comment">#(字体自己网上下载即可)</span></span><br><span class="line">&#125;</span><br><span class="line">.site-title &#123;</span><br><span class="line">    font-size: <span class="number">40</span>px !important;</span><br><span class="line">font-family: <span class="string">'Zitiming'</span> !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h4><p>在 <code>themes/next/source/css/_custom/custom.styl</code>中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(<span class="string">"鼠标样式地址"</span>),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(<span class="string">"鼠标样式地址"</span>),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="文章添加边框阴影效果"><a href="#文章添加边框阴影效果" class="headerlink" title="文章添加边框阴影效果"></a>文章添加边框阴影效果</h4><p>在 <code>themes/next/source/css/_custom/custom.styl</code>中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: <span class="number">0</span>px;</span><br><span class="line">   margin-bottom: <span class="number">60</span>px;</span><br><span class="line">   padding: <span class="number">25</span>px;</span><br><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h4><p>在<code>themes/next/_config.yml</code>，搜索<code>b2t</code>把 <code>false</code> 改为 <code>true</code> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><p>在博客根目录下，安装 Hexo 插件：(插件会放在<code>node_modules</code>文件夹中)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>接下来打开<code>站点配置</code>文件，末尾添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><p>然后打开next主题文件夹里面的<code>_config.yml</code>,在里面配置为如下样子：(就是在rss:的后面加上<code>/atom.xml</code>,注意在冒号后面要加一个空格)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>配置完之后运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="修改头像并旋转"><a href="#修改头像并旋转" class="headerlink" title="修改头像并旋转"></a>修改头像并旋转</h4><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: <span class="number">0</span> auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: <span class="number">80</span>px;</span><br><span class="line">  -webkit-border-radius: <span class="number">80</span>px;</span><br><span class="line">  -moz-border-radius: <span class="number">80</span>px;</span><br><span class="line">  box-shadow: inset <span class="number">0</span> <span class="number">-1</span>px <span class="number">0</span> <span class="comment">#333sf;</span></span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转<span class="number">360</span>度 */</span><br><span class="line">  -webkit-transition: -webkit-transform <span class="number">1.0</span>s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform <span class="number">1.0</span>s ease-out;</span><br><span class="line">  transition: transform <span class="number">1.0</span>s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转<span class="number">360</span>度 */</span><br><span class="line">  -webkit-transform: rotateZ(<span class="number">360</span>deg);</span><br><span class="line">  -moz-transform: rotateZ(<span class="number">360</span>deg);</span><br><span class="line">  transform: rotateZ(<span class="number">360</span>deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line"><span class="meta">@-webkit-keyframes play &#123;</span></span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(<span class="number">0</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(<span class="number">-360</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@-moz-keyframes play &#123;</span></span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    -moz-transform: rotateZ(<span class="number">0</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    -moz-transform: rotateZ(<span class="number">-360</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@keyframes play &#123;</span></span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    transform: rotateZ(<span class="number">0</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    transform: rotateZ(<span class="number">-360</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网站底部加上访问量"><a href="#网站底部加上访问量" class="headerlink" title="网站底部加上访问量"></a>网站底部加上访问量</h4><p>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在<code>copyright</code>前加上画红线这句：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在合适的位置添加显示统计的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="powered-by"&gt;</span><br><span class="line">&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;&lt;span id="busuanzi_container_site_uv"&gt;</span><br><span class="line">  本站访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="底部字数统计"><a href="#底部字数统计" class="headerlink" title="底部字数统计"></a>底部字数统计</h4><p>在博客根目录下运行如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="theme-info"&gt;</span><br><span class="line">  &lt;div class="powered-by"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class="post-count"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="修改网站的图标Favicon"><a href="#修改网站的图标Favicon" class="headerlink" title="修改网站的图标Favicon"></a>修改网站的图标Favicon</h4><p>在<a href="https://www.easyicon.net/" target="_blank" rel="noopener">图标库</a>中找一张（32*32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在<code>/themes/next/source/images</code>里，并且修改主题配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Put your favicon.ico into `hexo-site/source/` directory.</span></span><br><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure><h4 id="文章字数统计功能"><a href="#文章字数统计功能" class="headerlink" title="文章字数统计功能"></a>文章字数统计功能</h4><p>在博客根目录下安装 <code>hexo-wordcount</code>,运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在主题的配置文件中，配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure><h4 id="修改打赏字体不闪动"><a href="#修改打赏字体不闪动" class="headerlink" title="修改打赏字体不闪动"></a>修改打赏字体不闪动</h4><p>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>wechat:hover</code>和<code>alipay:hover</code>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 注释文字闪动函数</span><br><span class="line"> <span class="comment">#wechat:hover p&#123;</span></span><br><span class="line">    animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line">    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line">    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">#alipay:hover p&#123;</span></span><br><span class="line">   animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line">    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line">    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;Hexo博客搭建很容易，但是要把自己的博客美化好，还是挺难的，首先你必须得有闲心来做这个事情。然后就是一步一步操作，傻瓜式方法，你也试试吧。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="HEXO" scheme="https://laustar.fun/categories/HEXO/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown图片居中</title>
    <link href="https://laustar.fun/posts/Hexo/Markdown-0001.html"/>
    <id>https://laustar.fun/posts/Hexo/Markdown-0001.html</id>
    <published>2019-08-11T12:36:06.000Z</published>
    <updated>2020-04-22T10:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>标准的markdown中提供了图片的设置大小的操作，但是在本地把图片编辑好的代码生成静态文件发现图片不能显示了。使用下面方法可以完美解决，当然希望以后的hexo版本希望能够解决这个问题。</p></div><a id="more"></a> <h4 id="Markdown对图片进行居中设置大小"><a href="#Markdown对图片进行居中设置大小" class="headerlink" title="Markdown对图片进行居中设置大小"></a>Markdown对图片进行居中设置大小</h4><p>标准的markdown中提供了图片的设置大小的操作，但是在本地把图片编辑好的代码生成静态文件发现图片不能显示了。使用下面方法可以完美解决，当然希望以后的hexo版本希望能够解决这个问题。</p><h4 id="一般的markdown语法设置图片大小"><a href="#一般的markdown语法设置图片大小" class="headerlink" title="一般的markdown语法设置图片大小"></a>一般的markdown语法设置图片大小</h4><p>标准的markdown，在图片后面加上 “=200x300” (200是宽度，300是高度，也可以之定义宽度)，就能实现下面的效果。但是有一些版本的hexo不行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="string">"图片地址"</span>=<span class="number">200</span>x)</span><br></pre></td></tr></table></figure><h4 id="使用img标签，设置图片大小"><a href="#使用img标签，设置图片大小" class="headerlink" title="使用img标签，设置图片大小"></a>使用img标签，设置图片大小</h4><p>直接在markdown中使用HTML标签，多数markdown工具都支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=<span class="number">200</span> src=<span class="string">"图片地址"</span> &gt;</span><br></pre></td></tr></table></figure><h4 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h4><p>markdown目前没有支持图片居中的，所有的图片要么是100%宽度，支持设置大小的markdown一般也是左对齐的，所以居中只能靠HTML标签了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;</span><br><span class="line">![](图片地址 =<span class="number">200</span>x)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;</span><br><span class="line">  &lt;img width=<span class="number">200</span> src=<span class="string">"图片地址"</span> &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div align="center">  <img width="200" src="http://qnfile.devzhao.com/blog/2018-10-22-jhk-1540210533410.jpeg"></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;标准的markdown中提供了图片的设置大小的操作，但是在本地把图片编辑好的代码生成静态文件发现图片不能显示了。使用下面方法可以完美解决，当然希望以后的hexo版本希望能够解决这个问题。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://laustar.fun/categories/Markdown/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo静态博客搭建</title>
    <link href="https://laustar.fun/posts/Hexo/Hexo0001.html"/>
    <id>https://laustar.fun/posts/Hexo/Hexo0001.html</id>
    <published>2019-08-11T12:00:38.000Z</published>
    <updated>2020-04-22T10:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-iconc"><p>想要搭建一个静态的博客，对于有一点的计算机基础的人来说很容易，对于小白来说就有点难了，可能弄个git就整蒙逼了，来试试下面我给大家分享的方法吧，一步一步来，小白也能搭建一个属于自己的博客。</p></div><a id="more"></a> <h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p><a href="https://git-scm.com/" target="_blank" rel="noopener">官方下载地址</a></p><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h2><p>在 Windows 环境下安装 Node.js 非常简单，仅须<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载安装</a>文件并执行即可完成安装。</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>可以通过以下命令查看hexo的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h4 id="3-1创建Hexo文件夹"><a href="#3-1创建Hexo文件夹" class="headerlink" title="3.1创建Hexo文件夹"></a>3.1创建Hexo文件夹</h4><p>安装完成后，在合适的磁盘内新建一个文件夹作为博客目录 （如E:\Hexo），执行以下指令(<code>在E:\Hexo文件夹内点击鼠标右键，选择Git bash</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="3-2安装依赖包"><a href="#3-2安装依赖包" class="headerlink" title="3.2安装依赖包"></a>3.2安装依赖包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="3-3本地查看"><a href="#3-3本地查看" class="headerlink" title="3.3本地查看"></a>3.3本地查看</h4><p>我们已经搭建起本地的hexo博客了，输入下列内容进行本地缓存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>输入以下内容到浏览器<code>localhost:4000</code>即可查看本地效果。</p><h2 id="4-将博客部署到Github"><a href="#4-将博客部署到Github" class="headerlink" title="4.将博客部署到Github "></a>4.将博客部署到Github </h2><h4 id="4-1注册Github账号"><a href="#4-1注册Github账号" class="headerlink" title="4.1注册Github账号"></a>4.1注册Github账号</h4><p>已有账号可以跳过。没有的，<a href="https://github.com/" target="_blank" rel="noopener">请在此进行注册</a>，这里就不介绍了。</p><h4 id="4-2创建repository"><a href="#4-2创建repository" class="headerlink" title="4.2创建repository"></a>4.2创建repository</h4><p>在自己<a href="https://github.com/" target="_blank" rel="noopener">Github</a>主页右上角，点击加号， 创建一个新的repository。</p><h4 id="4-3部署"><a href="#4-3部署" class="headerlink" title="4.3部署"></a>4.3部署</h4><p>编辑<code>_config.yml</code>(在E:\Hexo下)。将<code>repository</code>换成你刚才新建的地址。<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/laustar/laustar.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="5-配置SSH"><a href="#5-配置SSH" class="headerlink" title="5.配置SSH"></a>5.配置SSH</h2><h4 id="5-1创建SSH"><a href="#5-1创建SSH" class="headerlink" title="5.1创建SSH"></a>5.1创建SSH</h4><p>在正式部署之前，新用户需要设置 <a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">SSH</a>。</p><h4 id="5-2安装上传工具"><a href="#5-2安装上传工具" class="headerlink" title="5.2安装上传工具"></a>5.2安装上传工具</h4><p>安装部分模块，执行下面的命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在第一次使用Git时，需要用户名和邮箱两个信息  。具体通过以下命令设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">"你的用户名"</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>最后输入以下命令上传即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-iconc&quot;&gt;&lt;p&gt;想要搭建一个静态的博客，对于有一点的计算机基础的人来说很容易，对于小白来说就有点难了，可能弄个git就整蒙逼了，来试试下面我给大家分享的方法吧，一步一步来，小白也能搭建一个属于自己的博客。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="HEXO" scheme="https://laustar.fun/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="https://laustar.fun/tags/HEXO/"/>
    
  </entry>
  
</feed>
